{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/api.js","Components/LineChart/LineChart.js","Components/BarChart/BarChart.js","Components/Chart/Chart.jsx","Components/CountrySelector/CountrySelector.jsx","App.js","serviceWorker.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountrySelector/CountrySelector.module.css","Image/image1.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","justify","spacing","item","component","Card","cx","card","infected","xs","sm","md","CardContent","Typography","color","variant","start","end","value","duration","separator","Date","toDateString","error","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountryData","countries","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","Fragment","options","legend","display","title","text","Chart","useState","setDailyData","useEffect","fetchedDailyData","CountrySelector","handleCountry","fetchedCountries","setFetchedCountries","fetchCountryAPI","FormControl","formControl","Select","native","aria-label","defaultValue","onChange","e","target","index","name","key","App","state","fetchedDataAPI","fetchedData","setState","handleCountryChange","this","src","CoronaImage","alt","image","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0c41e951.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\",\"error\":\"Cards_error__3XQ1Z\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container justify=\"center\" spacing={3}>\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.infected)}\n          xs={12}\n          sm={8}\n          md={3}\n        >\n          <CardContent>\n            <Typography color=\"primary\">Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.75}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Total number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.recovered)}\n          xs={12}\n          sm={8}\n          md={3}\n        >\n          <CardContent>\n            <Typography color=\"textPrimary\">Recovered</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.75}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Total number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.deaths)}\n          xs={12}\n          sm={8}\n          md={3}\n        >\n          <CardContent>\n            <Typography className={styles.error}>Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.75}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Total number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async country => {\n  let changeableUrl = url;\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate }\n    } = await axios.get(changeableUrl);\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate\n    };\n    return modifiedData;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map(dailyData => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const fetchCountryData = async () => {\n  try {\n    const {\n      data: { countries }\n    } = await axios.get(`${url}/countries`);\n    return countries;\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nexport const LineChart = ({ dailyData }) =>\n  dailyData.length !== 0 ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"blue\",\n            fill: true\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.3)\",\n            fill: true\n          }\n        ]\n      }}\n    />\n  ) : null;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst BarChart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  return (\n    <React.Fragment>\n      {confirmed ? (\n        <Bar\n          data={{\n            labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n            datasets: [\n              {\n                label: \"People\",\n                backgroundColor: [\n                  \"rgba( 0,255,0,0.5)\",\n                  \"rgba(0,0,255,0.5)\",\n                  \"rgba(255,0,0,0.5)\"\n                ],\n                data: [confirmed.value, recovered.value, deaths.value]\n              }\n            ]\n          }}\n          options={{\n            legend: { display: false },\n            title: { display: true, text: `Current status in ${country}` }\n          }}\n        />\n      ) : null}\n    </React.Fragment>\n  );\n};\nexport default BarChart;\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api/api\";\nimport styles from \"./Chart.module.css\";\nimport { LineChart } from \"../LineChart/LineChart\";\nimport BarChart from \"../BarChart/BarChart\";\n\nconst Chart = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchedDailyData = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchedDailyData();\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      {country ? (\n        <BarChart data={data} country={country} />\n      ) : (\n        <LineChart dailyData={dailyData} />\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, FormControl } from \"@material-ui/core\";\nimport { fetchCountryData } from \"../../api/api\";\nimport styles from \"./CountrySelector.module.css\";\n\nconst CountrySelector = ({ handleCountry }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchCountryAPI = async () => {\n      setFetchedCountries(await fetchCountryData());\n    };\n\n    fetchCountryAPI();\n  }, [setFetchedCountries]);\n  console.log(\"I am getting called \");\n  return (\n    <FormControl className={styles.formControl}>\n      <Select\n        native\n        aria-label=\"Select Countries\"\n        defaultValue=\"\"\n        onChange={(e) => {\n          handleCountry(e.target.value);\n        }}\n      >\n        <option value=\"\" aria-label=\"Select Countries\">\n          Select Country\n        </option>\n        {fetchedCountries.map((country, index) => (\n          <option\n            value={country.name}\n            key={index}\n            aria-label=\"picking countries\"\n          >\n            {country.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default CountrySelector;\n","import React from \"react\";\nimport Cards from \"./Components/Cards/Cards\";\nimport Chart from \"./Components/Chart/Chart\";\nimport CountrySelector from \"./Components/CountrySelector/CountrySelector\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api/api\";\nimport CoronaImage from \"./Image/image1.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\"\n  };\n\n  fetchedDataAPI = async country => {\n    if (country !== 0) {\n      const fetchedData = await fetchData(country);\n      this.setState({ data: fetchedData, country: country });\n    } else {\n      const fetchedData = await fetchData();\n      this.setState({ data: fetchedData });\n    }\n  };\n\n  // when app initializes componentDidMount fetches the Global Data\n  componentDidMount() {\n    this.fetchedDataAPI();\n    // const fetchedData = await fetchData();\n    // this.setState({ data: fetchedData });\n  }\n\n  //When the user changes the searchField value to country\n  // calling the fetching the data of country based on the\n  // country picked by the user.\n  handleCountryChange = country => {\n    this.fetchedDataAPI(country);\n    // console.log(\"country\", country);\n    // const fetchedData = await fetchData(country);\n    // this.setState({ data: fetchedData, country: country });\n  };\n  render() {\n    const { country, data } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <img src={CoronaImage} alt=\"corona-19\" className={styles.image} />\n        <Cards data={data} />\n        <CountrySelector handleCountry={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountrySelector_formControl__2jgHz\"};","module.exports = __webpack_public_path__ + \"static/media/image1.04679d84.png\";"],"sourceRoot":""}